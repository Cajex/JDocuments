import { ComboBox, ScrollView, Switch } from "std-widgets.slint";
import "../resources/SF-Pro-Display-Regular.otf";

global DashboardTheme {
    out property <string> font : "SF-Pro-Display-Regular";
    out property <brush> background : #141414;
    out property <brush> background_widget : #26252A;
    out property <brush> background_widget_light :#34323A;

    out property <color> color_blue : #2573CC;
    out property <color> color_green : #32AB4F;
    out property <color> color_yellow : #CBA215;
    out property <color> color_purple : #5E3A9F;

    out property <color> text_color : #CCCCCC;
    out property <color> text_color_first : #8f8c8c;
    out property <color> text_emphasize <=> color_blue;
    out property <color> icon_color <=> text_color;

    out property <image> image_rect : @image-url("../resources/rect.png");
    out property <image> image_icon : @image-url("../resources/icon.png");
    out property <image> image_download : @image-url("../resources/download.png");
    out property <image> image_folder : @image-url("../resources/folder.png");
    out property <image> image_menu : @image-url("../resources/menu.png");
    out property <image> image_pdf : @image-url("../resources/pdf.png");
    out property <image> image_profile : @image-url("../resources/profile.png");
    out property <image> image_submit : @image-url("../resources/submit.png");
    out property <image> image_tag : @image-url("../resources/tag.png");
    out property <image> image_versions : @image-url("../resources/versions.png");
    out property <image> image_search : @image-url("../resources/search.png");
    out property <image> image_star : @image-url("../resources/star.png");

    out property <length> default_icon_size : 25px;
    out property <length> big_icon_size : 100px;
    out property <length> default_gap_small : 7px;
    out property <length> default_gap_medium : 20px;
    out property <length> default_gap_large : 55px;

    out property <length> default_text_input_h : 53px;
    out property <length> default_text_input_w : 500px;

    out property <length> corner_radius : 12px;
    out property <length> padding <=> default_gap_small;

    out property <length> default_font_size : 19px;
    out property <length> mdeium_font_size : 25px;
    out property <length> small_font_size : DashboardTheme.default_font_size / 2.1;
}

component FolderTab inherits Rectangle {
    in property <brush>  fcolor: DashboardTheme.background_widget;
    in property <length> radius       : 12px;
    in-out property <string> content;
    width: t.width + DashboardTheme.default_gap_medium;
    border-radius: radius;
    background: fcolor;
    height: 40px;
    Image {
        width: DashboardTheme.default_icon_size;
        height: DashboardTheme.default_icon_size;
        x: (parent.width - self.width) / 2;
        y: -(self.height / 2) + 8px;
        source: DashboardTheme.image_rect;
        colorize: fcolor;
        z: 0;
    }
    t:=Text {
        color: DashboardTheme.text_color;
        text <=> content;
    }
}

component ClientDashboardIconField {
    in property <bool> round : false;
    in property <bool> descriptor : false;
    in property <bool> border : false;
    in property <string> descriptor_text;
    in property <image> image;
    in property <bool> tooltip : false;
    in property <bool> colorize;
    in property <brush> background : Colors.transparent;
    in-out property <string> tooltip_text;
    Rectangle {
        clip: false;
        border-radius: root.round ? 800px : DashboardTheme.corner_radius;
        border-width: root.border ? 1px : 0;
        border-color: DashboardTheme.background_widget;
        horizontal-stretch: 0;
        max-width: DashboardTheme.default_icon_size + (descriptor ? DashboardTheme.default_gap_medium : DashboardTheme.default_gap_small);
        background: root.background;

        a:=TouchArea {
            width: 100%;
            height: 100%;
            tooltip_popup:= FolderTab {
                visible: false;
                y: 60px;
                z: 20;
                content <=> tooltip_text;
            }
            property <bool> tw : false;
            changed has-hover => {
                if (root.tooltip) {
                    if (self.has-hover) {
                        if (!tw) {
                            tooltip_popup.visible = true;
                            tw = !tw;
                        }
                    } else {
                        if (tw) {
                            tooltip_popup.visible = false;
                            tw = !tw;
                        }
                    }
                }
            }
        }
        VerticalLayout {
            spacing: 9px;
            padding: descriptor ? DashboardTheme.default_gap_medium : DashboardTheme.default_gap_small;
            HorizontalLayout {
                alignment: LayoutAlignment.center;
                Image {
                    width: DashboardTheme.default_icon_size;
                    height: DashboardTheme.default_icon_size;
                    image-rendering: ImageRendering.smooth;
                    source: root.image;
                    states [
                        hovered when a.has-hover && root.colorize : {
                            colorize: DashboardTheme.color_blue;
                        }
                    ]

                }
            }
            if descriptor: Text {
                horizontal-alignment: TextHorizontalAlignment.center;
                vertical-alignment: TextVerticalAlignment.center;
                text: descriptor_text;
                color: DashboardTheme.text_emphasize;
            }
        }
    }
}

component ClientDashboardContainer {
    Rectangle {
        background: DashboardTheme.background_widget;
        border-radius: DashboardTheme.corner_radius;
        @children
    }
}

component ClientDashboardSection {
    in property <bool> top_line : false;
    in property <bool> bottom_line : false;
    in property <length> spacing : 0;
    VerticalLayout {
        spacing: root.spacing;
        if top_line : Rectangle {
            height: 1px;
            width: 100%;
            background: DashboardTheme.background_widget;
        }
        @children
        if bottom_line : Rectangle {
            height: 1px;
            width: 100%;
            background: DashboardTheme.background_widget;
        }
    }
}

component ClientDashboardMenu inherits ClientDashboardSection {
    bottom_line: true;
    top_line: true;
    spacing: 10px;
    HorizontalLayout {
        spacing: DashboardTheme.default_gap_large;
        alignment: LayoutAlignment.space-around;
        HorizontalLayout {
            horizontal-stretch: 0;
            spacing: DashboardTheme.default_gap_small;
            ClientDashboardIconField {
                horizontal-stretch: 0;
                image: DashboardTheme.image_menu;
                border: true;
                tooltip: false;
                tooltip_text: "Menu";
                colorize: true;
            }
            ClientDashboardIconField {
                horizontal-stretch: 0;
                image: DashboardTheme.image_profile;
                border: true;
                tooltip: false;
                tooltip_text: "Profile";
                colorize: true;
            }
            ClientDashboardIconField {
                horizontal-stretch: 0;
                image: DashboardTheme.image_download;
                border: true;
                tooltip: false;
                tooltip_text: "Download Software";
                colorize: true;
            }
        }
        HorizontalLayout {
            spacing: DashboardTheme.default_gap_small;
            VerticalLayout {
                horizontal-stretch: 1;
                alignment: LayoutAlignment.center;
                Rectangle {
                    clip: true;
                    VerticalLayout {
                        alignment: LayoutAlignment.center;
                        HorizontalLayout {
                            padding-left: 10px;
                            padding-right: 10px;
                            alignment: LayoutAlignment.start;
                            Image {
                                image-rendering: ImageRendering.smooth;
                                width: DashboardTheme.default_icon_size - 6px;
                                height: DashboardTheme.default_icon_size - 6px;
                                source: DashboardTheme.image_search;
                            }
                            HorizontalLayout {
                                horizontal-stretch: 1;
                                width: 90%;
                                alignment: LayoutAlignment.center;
                                Text {
                                    horizontal-alignment: TextHorizontalAlignment.center;
                                    vertical-alignment: TextVerticalAlignment.center;
                                    text: "Suchen oder filtern";
                                    font-weight: 700;
                                    color: DashboardTheme.text_color;
                                }
                            }
                        }
                    }
                    border-radius: DashboardTheme.corner_radius / 2;
                    max-width: DashboardTheme.default_text_input_w * 2;
                    horizontal-stretch: 1;
                    height: DashboardTheme.default_icon_size + 5px;
                    preferred-width: DashboardTheme.default_text_input_w;
                    background: DashboardTheme.background_widget;
                }
            }
        }
        HorizontalLayout {
            horizontal-stretch: 0;
            spacing: -15px;
            ClientDashboardIconField {
                image: DashboardTheme.image_versions;
                background: DashboardTheme.color_green;
                round: true;
                tooltip: true;
                tooltip_text: "Versionen";
                width: DashboardTheme.default_icon_size + 12px;
                height: DashboardTheme.default_icon_size + 12px;
            }
            ClientDashboardIconField {
                image: DashboardTheme.image_tag;
                background: DashboardTheme.color_blue;
                round: true;
                tooltip: true;
                tooltip_text: "Schlagwörter";
                width: DashboardTheme.default_icon_size + 12px;
                height: DashboardTheme.default_icon_size + 12px;
            }
            ClientDashboardIconField {
                image: DashboardTheme.image_folder;
                background: DashboardTheme.color_purple;
                round: true;
                tooltip: true;
                tooltip_text: "Verbindungen";
                width: DashboardTheme.default_icon_size + 12px;
                height: DashboardTheme.default_icon_size + 12px;
            }
            ClientDashboardIconField {
                image: DashboardTheme.image_submit;
                background: DashboardTheme.color_yellow;
                round: true;
                tooltip: true;
                tooltip_text: "Einstellen";
                width: DashboardTheme.default_icon_size + 12px;
                height: DashboardTheme.default_icon_size + 12px;
            }
        }
    }
}

component ClientDashboardButton {
    in property <color> color;
    in property <bool> colorize;
    in property <bool> icon;
    in property <image> icon_source;
    in property <string> text;
    in property <bool> count;
    in property <int> counti;
    in property <bool> round;
    Rectangle {
        vertical-stretch: 0;
        horizontal-stretch: 0;
        clip: true;
        height: 33px;
        border-width: 1px;
        border-color: DashboardTheme.background_widget;
        border-radius: round ? 50px : 6px;
        VerticalLayout {
            vertical-stretch: 0;
            padding: DashboardTheme.default_gap_small;
            alignment: LayoutAlignment.center;
            HorizontalLayout {
                alignment: LayoutAlignment.space-around;
                spacing: DashboardTheme.default_gap_small;
                horizontal-stretch: 0;
                if icon : Image {
                    vertical-alignment: ImageVerticalAlignment.center;
                    width: 13px;
                    height: 13px;
                    source: icon_source;
                }
                if colorize: Rectangle {
                    y: 2px;
                    width: 13px;
                    height: 13px;
                    border-radius: 1000px;
                    background: color;
                }
                Text {
                    horizontal-stretch: 0;
                    font-weight: 700;
                    vertical-alignment: TextVerticalAlignment.center;
                    font-size: DashboardTheme.default_font_size / 1.9;
                    color: DashboardTheme.text_color;
                    text: text;
                }
                if count: Rectangle {
                    horizontal-stretch: 0;
                    width: 40px;
                    height: 17px;
                    border-radius: 5px;
                    border-color: DashboardTheme.background_widget_light;
                    background: DashboardTheme.background_widget_light;
                    Text {
                        font-size: DashboardTheme.default_font_size / 1.9;
                        color: DashboardTheme.text_color;
                        text: counti;
                        horizontal-alignment: TextHorizontalAlignment.center;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                }
            }
        }
    }
}

export component ClientDashboardNavigation inherits ClientDashboardSection {
    property <[string]> link : ["Jilge", "documents"];
    bottom_line: true;
    VerticalLayout {
        height: root.width > 700px ? 90px : 120px;
        alignment: LayoutAlignment.space-around;
        padding-left: 24px;
        padding-right: 24px;
        HorizontalLayout {
            VerticalLayout {
                HorizontalLayout {
                padding-top: 13px;
                    alignment: LayoutAlignment.start;
                    spacing: DashboardTheme.default_gap_small;
                    for link[i] in link: HorizontalLayout {
                        alignment: LayoutAlignment.start;
                        spacing: DashboardTheme.default_gap_small;
                        Text {
                            color: i == 0 ?  DashboardTheme.text_color_first : DashboardTheme.text_color;
                            font-weight: 900;
                            font-size: 19px;
                            text: link;
                        }
                        Text {
                            color: i == 0 ?  DashboardTheme.text_color_first : DashboardTheme.text_color;
                            font-weight: 900;
                            font-size: 19px;
                            text: "/";
                        }
                    }
                }
            }
            if root.width > 700px : HorizontalLayout {
                padding-top: 15px;
                spacing: DashboardTheme.default_gap_small;
                ClientDashboardButton {
                    width: 120px;
                    horizontal-stretch: 0;
                    text: "Angemerkt";
                    count: true;
                    counti: 12;
                }
                ClientDashboardButton {
                    width: 120px;
                    horizontal-stretch: 0;
                    text: "Versionen";
                    icon: true;
                    icon_source: DashboardTheme.image_versions;
                }
            }
        }
        Text {
            color: DashboardTheme.text_color_first;
            text: "Dokumente können in mehreren Ordnern liegen, Schlagwörter zum Filtern";
        }
        if root.width < 700px : HorizontalLayout {
                spacing: DashboardTheme.default_gap_small;
                ClientDashboardButton {
                    width: 120px;
                    horizontal-stretch: 0;
                    text: "Angemerkt";
                    count: true;
                    counti: 12;
                }
                ClientDashboardButton {
                    width: 120px;
                    horizontal-stretch: 0;
                    text: "Versionen";
                    icon: true;
                    icon_source: DashboardTheme.image_versions;
                }
        }
    }

}

component Arrow inherits Path {
    in property <bool> mirror : false;
    width: 10px;
    height: 10px;

    stroke-line-cap: LineCap.round;
    stroke-width: 1px;


    LineTo { x: 1; y: mirror ? -1 : 1; }
    LineTo { x: 2; y: mirror ? -2 : 2; }
    LineTo { x: 3; y: mirror ? -1 : 1; }

}


component DashboardComboBox {
    in-out property <[string]> models : ["documents", "KO1", "KO2", "KO3", "KO4", "KO5"];
    in-out property <string> scope : models[0];
    callback on_select(string);
    Rectangle {
        in-out property <bool> clicked : false;
        border-color: clicked ? DashboardTheme.color_blue : DashboardTheme.background_widget;
        border-width: 1px;
        border-radius: 6px;
        a:=TouchArea {
            changed has-hover => {
                clicked = a.has-hover;
            }
            clicked => {
               clicked = true;
               screen.show();
            }
        }
        VerticalLayout {
            alignment: LayoutAlignment.center;
            HorizontalLayout {
                alignment: LayoutAlignment.space-between;
                padding-left: DashboardTheme.default_gap_small;
                padding-right: DashboardTheme.default_gap_small;
                Text {
                    text: scope;
                    color: DashboardTheme.text_color;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Rectangle {
                    border-color: DashboardTheme.color_blue;
                    border-width: 1px;
                    border-radius: 3px;
                    HorizontalLayout {
                        padding: 3px;
                        padding-left: 5px;
                        padding-right: 5px;
                        alignment: LayoutAlignment.center;
                        VerticalLayout {
                            spacing: 3px;
                            Arrow {
                                mirror: true;
                                width: 10px;
                                height: 5px;
                                stroke: DashboardTheme.icon_color;
                            }
                            Arrow {
                                mirror: false;
                                width: 10px;
                                height: 5px;
                                stroke: DashboardTheme.icon_color;
                            }
                        }
                    }
                }
            }
        }
        screen:= PopupWindow {
            width: root.width;
            height: 120px;
            y: root.height + DashboardTheme.default_gap_small;
            Rectangle {
                clip: true;
                drop-shadow-color: DashboardTheme.background_widget.with-alpha(0.5);
                drop-shadow-offset-y: 0.1px;
                drop-shadow-offset-x: 0.1px;
                border-radius: 6px;
                border-color: DashboardTheme.background_widget_light;
                border-width: 1px;
                ScrollView {
                    viewport-height: 200px;
                    VerticalLayout {
                        for model[i] in models: Rectangle {
                            height: DashboardTheme.default_icon_size;
                            width: 100%;
                            border-radius: 6px;
                            p:=TouchArea {
                                changed has-hover => {
                                    parent.background =  p.has-hover ? DashboardTheme.color_blue.with-alpha(0.8) : Colors.transparent;
                                }
                                clicked => {
                                    scope = model;
                                    on_select(model);
                                }
                            }
                            Text {
                                text: model;
                                color: DashboardTheme.text_color;
                                vertical-alignment: TextVerticalAlignment.center;
                                horizontal-alignment: TextHorizontalAlignment.left;
                            }
                        }
                    }
                }
            }
        }
    }
}

export component ClientDashboardLinkNavigation {
    vertical-stretch: 0;
    Rectangle {
        y: 20px;
        width: 96%;
        height: 160px;
        border-radius: DashboardTheme.corner_radius;
        border-width: 1px;
        border-color: DashboardTheme.background_widget;
        clip: true;
        VerticalLayout {
            alignment: LayoutAlignment.center;
            padding: DashboardTheme.default_gap_medium;
            spacing: DashboardTheme.default_gap_medium;
            HorizontalLayout {
                spacing: DashboardTheme.default_gap_small;
                height: 26px;
                Image {
                    source: DashboardTheme.image_folder;
                    width: DashboardTheme.default_icon_size;
                    height: DashboardTheme.default_icon_size;
                }
                Text {
                    color: DashboardTheme.text_color;
                    vertical-alignment: TextVerticalAlignment.center;
                    text: "Verbindungen";
                }
            }
            DashboardComboBox {
                width: 100%;
                height: 28px;
                models: ["documents", "KO1", "KO2", "KO3"];
            }
            Text {
                color: DashboardTheme.text_color_first;
                text: "Dokumente können in mehreren Ordnern gleichzeitig liegen (Sammlungen).";
            }
        }
    }
}

export component ClientDashboardTagNavigation {
    in-out property <[string]> tags : [
        "Tag 1","Tag 2","Tag 3","Tag 4","Tag 5","Tag 6","Tag 7",
        "Tag 4","Tag 5","Tag 6","Tag 7"
    ];

    Rectangle {
        width: 96%;
        y: 200px;
        border-radius: DashboardTheme.corner_radius;
        border-width: 1px;
        border-color: DashboardTheme.background_widget;
        clip: true;

        // Inhaltsspalte bekommt eine ID, damit wir ihre preferred-height benutzen können
        content := VerticalLayout {
            alignment: LayoutAlignment.center;
            padding: DashboardTheme.default_gap_medium;
            spacing: DashboardTheme.default_gap_medium;

            // Kopfzeile
            HorizontalLayout {
                vertical-stretch: 0;
                spacing: DashboardTheme.default_gap_small;
                height: 26px;
                Image {
                    source: DashboardTheme.image_tag;
                    width: DashboardTheme.default_icon_size;
                    height: DashboardTheme.default_icon_size;
                }
                Text {
                    color: DashboardTheme.text_color;
                    vertical-alignment: TextVerticalAlignment.center;
                    text: "Schlagwörter";
                }
            }

            // Tag-"Grid" ohne Stretch -> size-to-content
            grid := VerticalLayout {
                padding-top: DashboardTheme.default_gap_small;
                vertical-stretch: 0;            // <<< wichtig: nicht strecken
                spacing: 10px;

                for tag[i] in tags:  Rectangle {
                    if Math.mod(i, 4) == 0: HorizontalLayout {
                        spacing: DashboardTheme.default_gap_small;

                        if i < tags.length: ClientDashboardButton {
                            max-width: 150px; horizontal-stretch: 0;
                            colorize: true; color: Colors.tomato;
                            text: tags[i]; count: true; counti: 2;
                        }
                        if i + 1 < tags.length: ClientDashboardButton {
                            max-width: 150px; horizontal-stretch: 0;
                            colorize: true; color: Colors.thistle;
                            text: tags[i + 1]; count: true; counti: 2;
                        }
                        if i + 2 < tags.length: ClientDashboardButton {
                            max-width: 150px; horizontal-stretch: 0;
                            colorize: true; color: Colors.aliceblue;
                            text: tags[i + 2]; count: true; counti: 2;
                        }
                        if i + 3 < tags.length: ClientDashboardButton {
                            max-width: 150px; horizontal-stretch: 0;
                            colorize: true; color: Colors.plum;
                            text: tags[i + 3]; count: true; counti: 2;
                        }
                    }
                }
            }

            // Fußzeile
            HorizontalLayout {
                vertical-stretch: 0;
                spacing: DashboardTheme.default_gap_small;
                Switch { }
                Text {
                    vertical-alignment: TextVerticalAlignment.center;
                    color: DashboardTheme.text_color_first;
                    text: "Globale Schlagwörter anzeigen.";
                }
            }
        }

        // Karte auf Inhaltsgröße einschnappen lassen:
        height: content.preferred-height;
        // (Optional) Obergrenze setzen, mit Scrollen im Inhalt:
        // max-height: 360px;
        // wenn max-height aktiv ist: packe `content` in eine Flickable für Scrollen
    }
}

component ClientDashboardContent inherits Rectangle {
    border-radius: DashboardTheme.corner_radius;
    border-width: 1px;
    border-color: DashboardTheme.background_widget;
    width: 96%;
    height: 500px;
    y: 800px;
}

export component ClientDashboard inherits Window {
    default-font-family: DashboardTheme.font;
    ScrollView {
        Rectangle {
        background: DashboardTheme.background;
        width: 100%;
        height: 100%;
        /* content */
            VerticalLayout {
                spacing: DashboardTheme.default_gap_small;
                /* menu bar */
                ClientDashboardMenu {

                }
                ClientDashboardNavigation {

                }
                ClientDashboardLinkNavigation {

                }
                ClientDashboardTagNavigation {

                }
                ClientDashboardContent {

                }
            }
        }

    }
}