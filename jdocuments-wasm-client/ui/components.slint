import { ProductTheme, ProductImages } from "global.slint";
import "../resources/SF-Pro-Display-Regular.otf";

export component ButtonComponent inherits Rectangle {
    in-out property <string> text;
    in-out property <{image: image, v: bool}> image : { image: ProductImages.image_icon, v: false };
    in-out property <bool> visible_background : true;
    in-out property <length> font_size : ProductTheme.font_size_1;
    in-out property <length> corner_radius : ProductTheme.corner_radius_0;
    callback on_click();

    border-width: ProductTheme.border_width_0;
    border-radius: corner_radius;
    border-color: ProductTheme.border_color;
    in property <brush> surface : visible_background ? ProductTheme.surface_button : ProductTheme.background_canvas;
    in property <brush> hover_surface : visible_background ? ProductTheme.surface_button_hover : ProductTheme.background_canvas;

    background: surface;
    animate background {
         duration: ProductTheme.dur_fast;
         easing: ease-out-bounce;
         direction: AnimationDirection.normal;
    }
    a:=TouchArea {
        changed has-hover => {
            root.background = a.has-hover ? hover_surface : surface;
        }
        clicked => {
            on_click();
        }
    }
    HorizontalLayout {
        padding: ProductTheme.gap_2;
        spacing: ProductTheme.gap_1;
        alignment: LayoutAlignment.center;
        if image.v: Image {
            vertical-alignment: ImageVerticalAlignment.center;
            width: ProductTheme.icon_size_2;
            height: ProductTheme.icon_size_2;
            source: image.image;
            image-rendering: ImageRendering.smooth;
        }
        Text {
            vertical-alignment: TextVerticalAlignment.center;
            text <=> text;
            color: ProductTheme.text_color;
            font-size: font_size;
            font-weight: ProductTheme.font_weight_1;
        }
    }
}

export component DisplayComponent {

}

export component ContainerComponent inherits Rectangle {
    in-out property <bool> visible_background : true;
    in-out property <{title: string, v: bool}> title : { title: "", v: false };
    background: visible_background ? ProductTheme.background_panel : ProductTheme.background_canvas;
    border-radius: ProductTheme.corner_radius_1;
    border-color: ProductTheme.border_color;
    border-width: ProductTheme.border_width_0;
    VerticalLayout {
        spacing: ProductTheme.gap_2;
        if title.v: Text {
            vertical-alignment: TextVerticalAlignment.center;
            horizontal-alignment: TextHorizontalAlignment.left;
            text: title.title;
            color: ProductTheme.text_color;
            font-size: ProductTheme.font_size_1;
            font-weight: ProductTheme.font_weight_2;
        }
        padding: ProductTheme.gap_2;
        @children
    }
}

export component MenuComponent {
    
}

export component TextInputComponent inherits Rectangle {
    in-out property <string> preset;
    in-out property <{image: image, v: bool}> image : { image: ProductImages.image_icon, v: false };
    border-radius: ProductTheme.corner_radius_0;
    border-color: ProductTheme.border_color;
    border-width: ProductTheme.border_width_0;
    HorizontalLayout {
        padding: ProductTheme.gap_2;
        spacing: ProductTheme.gap_1;
        if image.v: Image {
            vertical-alignment: ImageVerticalAlignment.center;
            width: ProductTheme.icon_size_2;
            height: ProductTheme.icon_size_2;
            source: image.image;
            image-rendering: ImageRendering.smooth;
        }
        input:=TextInput {
            text: preset;
            color: ProductTheme.text_muted;
            font-size: ProductTheme.font_size_1;
            vertical-alignment: TextVerticalAlignment.center;
            horizontal-alignment: TextHorizontalAlignment.left;
            changed has-focus => {
                self.text = self.has-focus ? "" : preset;
                self.color = self.has-focus ? ProductTheme.text_color : ProductTheme.text_muted;
                root.border-color = self.has-focus ? ProductTheme.blue : ProductTheme.border_color;
                root.border-width = self.has-focus ? ProductTheme.border_width_1 : ProductTheme.border_width_0;
            }
        }
    }
}

export component SearchComponent {

}

export struct TableComponentEntry {
    color: color,
    text: { text: string, v: bool },
    description: { desc: string, v: bool },
    image: { image: image, v: bool },
    display: { display: string, v: bool, },
}

// ─────────────────────────────────────────────────────────────────────────────
// Zelle: rendert Icon, Text(+optional Description) und/oder Badge-Display
// ─────────────────────────────────────────────────────────────────────────────
component TableCell inherits Rectangle {
    in property <TableComponentEntry> entry;
    in property <int> col_index : 0;
    in property <int> col_count : 1;
    in property <length> row_height : 32px;

    min-height: row_height;
    HorizontalLayout {
        spacing: ProductTheme.gap_1;
        padding-left: ProductTheme.gap_3;
        padding-right: ProductTheme.gap_3;
        alignment: LayoutAlignment.center;

        if entry.image.v : Image {
            width: ProductTheme.icon_size_3;
            height: ProductTheme.icon_size_3;
            vertical-alignment: ImageVerticalAlignment.center;
            source: entry.image.image;
            image-rendering: ImageRendering.smooth;
            horizontal-alignment: ImageHorizontalAlignment.left;
        }

        if entry.text.v : VerticalLayout {
            spacing: ProductTheme.gap_0;

            Text {
                text: entry.text.text;
                color: ProductTheme.text_color;
                font-size: ProductTheme.font_size_1;
                wrap: TextWrap.no-wrap;
                vertical-alignment: TextVerticalAlignment.center;
                horizontal-alignment: TextHorizontalAlignment.left;
            }

            if entry.description.v : Text {
                text: entry.description.desc;
                color: ProductTheme.text_muted;
                font-size: ProductTheme.font_size_0;
                wrap: TextWrap.no-wrap;
                overflow: TextOverflow.elide;
                vertical-alignment: TextVerticalAlignment.center;
                horizontal-alignment: TextHorizontalAlignment.left;
            }
        }

        if entry.display.v : ButtonComponent {
            text: entry.display.display;
            visible_background: false;
            corner_radius: ProductTheme.corner_radius_3;
            font_size: ProductTheme.font_size_xs;
        }
    }
}

// ─────────────────────────────────────────────────────────────────────────────
// Datenzeile: nutzt horizontal-stretch für feste Spaltenverhältnisse
// ─────────────────────────────────────────────────────────────────────────────
component TableRow inherits Rectangle {
    in property <[TableComponentEntry]> rov;
    in property <[int]> col_weights : [6, 3, 3];
    in property <length> row_height : 30px;
    in property <int> index : 0;

    // dezent zebra
    background: Math.mod(index, 2) == 1 ? ProductTheme.background_subtle : transparent;

    VerticalLayout {
        spacing: row_height;

        HorizontalLayout {
            padding-top: ProductTheme.gap_2;
            spacing: 0px; // wichtig: keine Lücken zwischen Zellen
                for row[i] in rov : Rectangle {
                horizontal-stretch: i < col_weights.length ? col_weights[i] : 1;

                TableCell {
                    entry: rov[i];
                    col_index: i;
                    col_count: rov.length;
                    row_height: root.row_height;
                }
            }
        }

        Rectangle {
            height: ProductTheme.border_width_0;
            background: ProductTheme.border_color;
            width: 100%;
        }
    }
}

// ─────────────────────────────────────────────────────────────────────────────
// Tabelle: Header + Rows; ohne GridLayout, rein mit Flex (Vertical/Horizontal)
// ─────────────────────────────────────────────────────────────────────────────
export component TableComponent inherits Rectangle {
    in-out property <[string]> displays : ["Name", "Tag", "Updated"];
    in-out property <[[TableComponentEntry]]> entries;

    // Spaltenverhältnis.
    in property <[int]> col_weights : [1, 3, 1];
    in property <length> row_height : 32px;

    border-radius: ProductTheme.corner_radius_1;
    border-color: ProductTheme.border_color;
    border-width: ProductTheme.border_width_0;
    background: ProductTheme.background_panel;
    clip: true;

    VerticalLayout {
        spacing: 0;

        // Header
        Rectangle {
            background: ProductTheme.background_subtle;

            VerticalLayout {
                spacing: 0;

                HorizontalLayout {
                    spacing: 0;

                    // Headerzellen im gleichen Verhältnis
                    for display[i] in displays : Rectangle {
                        horizontal-stretch: i < col_weights.length ? col_weights[i] : 1;

                        Text {
                            padding-left: ProductTheme.gap_3;
                            padding-right: ProductTheme.gap_3;
                            min-height: 28px;

                            text: display;
                            color: ProductTheme.text_muted;
                            font-size: ProductTheme.font_size_0;
                            wrap: TextWrap.no-wrap;
                            overflow: TextOverflow.elide;
                            vertical-alignment: TextVerticalAlignment.center;
                            horizontal-alignment: i == (displays.length - 1)
                                ? TextHorizontalAlignment.right
                                : TextHorizontalAlignment.left;
                        }
                    }
                }
                Rectangle {
                    height: ProductTheme.border_width_0;
                    background: ProductTheme.border_color;
                }
            }
        }

        for entrie[r] in entries : TableRow {
            rov: entrie;
            index: r;
            col_weights: root.col_weights;
            row_height: root.row_height;
        }
    }
}

export component LogicalLinkComponent inherits HorizontalLayout {
    in-out property <[string]> links : ["remote-archiv", "documents", "2025"];
    spacing: ProductTheme.gap_1;
    alignment: LayoutAlignment.start;
    callback on_click(string);
    Text {
        text: "/";
        color: ProductTheme.surface_button_hover;
        font-size: ProductTheme.font_size_1;
        font-weight: ProductTheme.font_weight_3;
    }

    for link[i] in links: HorizontalLayout {
        spacing: 3px;
        property <bool> underlined : false;
        VerticalLayout {
            Text {
                color: (i + 1) != links.length ? ProductTheme.blue : ProductTheme.text_color;
                text: link;
                font-size: ProductTheme.font_size_1;
                TouchArea {
                    changed has-hover => {
                        underlined = self.has-hover;
                    }
                    clicked => {
                        on_click(link);
                    }
                }
            }
            if underlined: Rectangle {
                height: 1px;
                background: (i + 1) != links.length ? ProductTheme.blue : ProductTheme.text_color;
            }
        }
        if (i + 1) != links.length: Path {
            width: 10px;
            height: 10px;
            y: 6px;
            stroke-width: 2px;
            stroke: ProductTheme.surface_button_hover;
            LineTo {
                x: 0; y: 1;
            }
            LineTo {
                x: 1; y: 0;
            }
            LineTo {
                x: 0; y: -1;
            }
        }
    }
}

export component TestWindow inherits Window {
    out property <string> font : "SF-Pro-Display-Regular";

    out property <[[TableComponentEntry]]> entries : [
        // ───────────── Row 1 ─────────────
        [
            // Col 1: Name
             {
                color: ProductTheme.text_color,
                image: { image: ProductImages.image_pdf, v: true },
                text:  { text: "Onboarding-Handbuch.pdf", v: true },
                description: { desc: "/Company/HR", v: true },
                display: { display: "", v: false },
            },
            // Col 2: Tag
            {
                color: ProductTheme.text_color,
                image: { image: ProductImages.image_tag, v: false },
                text:  { text: "", v: false },
                description: { desc: "", v: false },
                display: { display: "#policy", v: true },
            },
            // Col 3: Updated
            {
                color: ProductTheme.text_muted,
                image: { image: ProductImages.image_versions, v: false },
                text:  { text: "2d ago", v: true },
                description: { desc: "", v: false },
                display: { display: "", v: false },
            }
        ],

        // ───────────── Row 2 ─────────────
        [
            // Col 1: Name
            {
                color: ProductTheme.text_color,
                image: { image: ProductImages.image_icon, v: true },
                text:  { text: "Marketing-Roadmap.md", v: true },
                description: { desc: "/Teams/Marketing", v: true },
                display: { display: "", v: false },
            },
            // Col 2: Tag
            {
                color: ProductTheme.text_color,
                image: { image: ProductImages.image_tag, v: false },
                text:  { text: "", v: false },
                description: { desc: "", v: false },
                display: { display: "#strategie", v: true },
            },
            // Col 3: Updated
            {
                color: ProductTheme.text_muted,
                image: { image: ProductImages.image_versions, v: false },
                text:  { text: "10h ago", v: true },
                description: { desc: "", v: false },
                display: { display: "", v: false },
            }
        ],

        // ───────────── Row 3 ─────────────
        [
            // Col 1: Name
            {
                color: ProductTheme.text_color,
                image: { image: ProductImages.image_folder, v: true },
                text:  { text: "Design-System.fig", v: true },
                description: { desc: "/Design/Assets", v: true },
                display: { display: "", v: false },
            },
            // Col 2: Tag
            {
                color: ProductTheme.text_color,
                image: { image: ProductImages.image_tag, v: false },
                text:  { text: "", v: false },
                description: { desc: "", v: false },
                display: { display: "#ui", v: true },
            },
            // Col 3: Updated
            {
                color: ProductTheme.text_muted,
                image: { image: ProductImages.image_versions, v: false },
                text:  { text: "7d ago", v: true },
                description: { desc: "", v: false },
                display: { display: "", v: false },
            }
        ]
    ];
    default-font-family: font;
    background: ProductTheme.background_canvas;
    VerticalLayout {
        width: 900px;
        alignment: LayoutAlignment.center;
        HorizontalLayout {
            alignment: LayoutAlignment.center;
            ContainerComponent {
                title: { title: "Test", v: true };
                TextInputComponent {
                    image: { image: ProductImages.image_search, v: true };
                    preset: "api, backend and other stuff";
                }
                ButtonComponent {
                    image: { image: ProductImages.image_search, v: true };
                    visible_background: true;
                    text: "Commit";
                }
                HorizontalLayout {
                    spacing: ProductTheme.gap_1;
                    ButtonComponent {
                        image: { image: ProductImages.image_search, v: false };
                        visible_background: false;
                        text: "+";
                    }
                    ButtonComponent {
                        image: { image: ProductImages.image_search, v: false };
                        visible_background: false;
                        text: "-";
                    }
                }
                TableComponent {
                    displays: ["Name", "Tag", "Updated"];
                    entries <=> entries;
                }
                ContainerComponent {
                    visible_background: false;
                    LogicalLinkComponent {

                    }
                }
            }
        }
    }   
}