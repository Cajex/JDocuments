global ColorTheme {
    out property <brush> brush_primary_background : #141414;
    out property <brush> brush_secondary_background : #26252A;

    out property <color> color_blue : #2573CC;
    out property <color> color_green : #32AB4F;
    out property <color> color_yellow : #CBA215;
    out property <color> color_purple : #5E3A9F;

    out property <color> color_text : #CCCCCC;
    out property <color> color_emphasize_text <=> color_blue;
    out property <color> color_icon <=> color_text;

    out property <image> image_icon : @image-url("../resources/icon.png");
    out property <image> image_download : @image-url("../resources/download.png");
    out property <image> image_folder : @image-url("../resources/folder.png");
    out property <image> image_menu : @image-url("../resources/menu.png");
    out property <image> image_pdf : @image-url("../resources/pdf.png");
    out property <image> image_profile : @image-url("../resources/profile.png");
    out property <image> image_submit : @image-url("../resources/submit.png");
    out property <image> image_tag : @image-url("../resources/tag.png");
    out property <image> image_versions : @image-url("../resources/versions.png");

    out property <length> default_icon_size : 37px;
    out property <length> big_icon_size : 100px;
    out property <length> default_gap_small : 10px;
    out property <length> default_gap_medium : 30px;
    out property <length> default_gap_large : 73px;

    out property <length> default_text_input_h : 53px;
    out property <length> default_text_input_w : 500px;

    out property <length> corner_radius : 12px;
    out property <length> padding <=> default_gap_small;

    out property <length> default_font_size : 24px;
    out property <length> mdeium_font_size : 36px;
}

component ClientDashboardWindow inherits Window {

    default-font-family: "SF Mono";
    max-width: 1728px;
    max-height: 1117px;

    icon: ColorTheme.image_icon;
    background: ColorTheme.brush_primary_background;
    Rectangle {
        width: 100%;
        height: 100%;
        padding: 0px;
        border-width: 0px;
        background: ColorTheme.brush_primary_background;
        @children
    }
}

component ClientDashboardActionField {
    callback on_click();
    callback on_pointer_event(PointerEvent);
    in-out property <image> image;
    in-out property <color> background : Colors.transparent;
    in-out property <length> border : 1px;
    in-out property <length> radius : ColorTheme.corner_radius;
    in-out property <brush> colorize : ColorTheme.color_icon;
    in-out property <brush> colorize_hover : ColorTheme.color_green;
    in-out property <bool> hovered : false;
    states [
        hovered when area.has-hover : {
            hovered: true;
        }
    ]
    rect:=Rectangle {
        background: background;
        area:=TouchArea {
            clicked => {
                on_click();
            }
        }
        states [
            hover when area.has-hover && colorize_hover != colorize : {
                border-radius: 0px;
            }
        ]
        animate border-radius {
             duration: 50ms;
             easing: ease-in-out;
             direction: AnimationDirection.normal;
        }
        border-color: ColorTheme.brush_secondary_background;
        border-width: border;
        border-radius: radius;
        width: 57px;
        height: 57px;
        clip: true;
        HorizontalLayout {
            alignment: LayoutAlignment.center;
            VerticalLayout {
                alignment: LayoutAlignment.center;
                img:=Image {
                    colorize: colorize;
                    width: ColorTheme.default_icon_size;
                    height: ColorTheme.default_icon_size;
                    padding: 10px;
                    source: image;
                    animate colorize {
                         duration: 100ms;
                         easing: ease-in-quad;
                    }
                    states [
                        hovered when area.has-hover && colorize_hover != colorize : {
                            img.colorize: colorize_hover;
                        }
                    ]
                }
            }
        }
        @children
    }
}

component ClientDashboardMenu {
    VerticalLayout {
        HorizontalLayout {
            min-width: 1200px;
            padding: 28px;
            /* action menu item */
            HorizontalLayout {
                alignment: LayoutAlignment.center;
                spacing: ColorTheme.default_gap_medium;
                menu:=ClientDashboardActionField {
                    image: ColorTheme.image_menu;
                    radius: ColorTheme.corner_radius;
                }
                profile:=ClientDashboardActionField {
                    image: ColorTheme.image_profile;
                    radius: ColorTheme.corner_radius;
                }
                download:=ClientDashboardActionField {
                    image: ColorTheme.image_download;
                    radius: ColorTheme.corner_radius;
                }
            }
            /* search field */
            HorizontalLayout {
                alignment: LayoutAlignment.center;
                spacing: ColorTheme.default_gap_medium;
                Text {
                    vertical-alignment: TextVerticalAlignment.center;
                    font-weight: 700;
                    font-size: ColorTheme.mdeium_font_size;
                    text: "Suchen";
                }
                Rectangle {
                    width: ColorTheme.default_text_input_w;
                    height: ColorTheme.default_text_input_h;
                    background: ColorTheme.brush_secondary_background;
                    border-radius: ColorTheme.corner_radius;
                }
            }

            /* Filter field */
            Rectangle {
                in-out property <[{color: color, image: image}]> actions: [
                    { color: ColorTheme.color_green, image: ColorTheme.image_versions },
                    { color: ColorTheme.color_blue, image: ColorTheme.image_tag },
                    { color: ColorTheme.color_purple, image: ColorTheme.image_folder },
                    { color: ColorTheme.color_yellow, image: ColorTheme.image_submit }
                ];
                for item[i] in actions : Rectangle {
                    ClientDashboardActionField {
                        background: item.color;
                        image: item.image;
                        border: 0px;
                        radius: 1000px;
                        colorize_hover: ColorTheme.color_icon;
                        x: i * 30px;
                        states [
                            hover when self.hovered : {

                            }
                        ]
                    }
                }
            }
        }
        Rectangle {
            width: 100%;
            height: 1px;
            background: ColorTheme.brush_secondary_background;
        }
    }
}

export struct ClientDashboardLinkResult {
    name: string,
}

export component ClientDashboardLinkResults {
    in-out property <[ClientDashboardLinkResult]> results;
    VerticalLayout {
        /* descriptor */
        HorizontalLayout {
            Text {
                text: "Verbindungen";
            }
            Text {
                text: results.length;
                color: ColorTheme.color_emphasize_text;
            }
            Image {

            }
        }

        VerticalLayout {
            spacing: ColorTheme.default_gap_large;
            for result[i] in results : Rectangle {
                if Math.mod(i, 3) == 0: HorizontalLayout {
                    spacing: ColorTheme.default_gap_large;
                    if i >= results.length: VerticalLayout {
                        Image {
                            source: ColorTheme.image_folder;
                            width: ColorTheme.big_icon_size;
                            height: ColorTheme.big_icon_size;
                        }
                        Text {
                            text: results[i].name;
                            color: ColorTheme.color_emphasize_text;
                        }
                    }
                    if i+1 >= results.length: VerticalLayout {
                        Image {
                            source: ColorTheme.image_folder;
                            width: ColorTheme.big_icon_size;
                            height: ColorTheme.big_icon_size;
                        }
                        Text {
                            text: results[i+1].name;
                            color: ColorTheme.color_emphasize_text;
                        }
                    }
                    if i+2 >= results.length: VerticalLayout {
                        Image {
                            source: ColorTheme.image_folder;
                            width: ColorTheme.big_icon_size;
                            height: ColorTheme.big_icon_size;
                        }
                        Text {
                            text: results[i+2].name;
                            color: ColorTheme.color_emphasize_text;
                        }
                    }
                    if i+3 >= results.length: VerticalLayout {
                        Image {
                            source: ColorTheme.image_folder;
                            width: ColorTheme.big_icon_size;
                            height: ColorTheme.big_icon_size;
                        }
                        Text {
                            text: results[i+3].name;
                            color: ColorTheme.color_emphasize_text;
                        }
                    }
                }
            }
        }
    }
}

export enum ClientDashboardDocumentIcon {
    PDF,
    File
}

export enum ClientDashboardDocumentLanguage {
    German,
    Ukrainian
}

export struct ClientDashboardDocument {
    title: string,
    icon: ClientDashboardDocumentIcon,
    language: ClientDashboardDocumentLanguage,
    origin: string,
    author: string,
    tags: [{name: string, color: color}]
}

export component ClientDashboardDocuments {
    in-out property <[ClientDashboardDocument]> documents;

    VerticalLayout {
        HorizontalLayout {
            Text {
                text: "Dokumente";
            }
            Text {
                text: documents.length;
                color: ColorTheme.color_emphasize_text;
            }
            Image {

            }
        }
        VerticalLayout {
            for item[i] in documents : Rectangle {
                clip: true;
                VerticalLayout {
                    HorizontalLayout {
                        ClientDashboardActionField {

                        }
                        Text {
                            text: item.title;
                            color: ColorTheme.color_emphasize_text;
                        }
                    }
                    VerticalLayout {
                        HorizontalLayout {
                            HorizontalLayout {
                                Text {
                                    text: "Sprache";
                                }
                                Image {

                                }
                            }
                            HorizontalLayout {
                                Text {
                                    text: "Ursprung";
                                }
                                Text {
                                    color: ColorTheme.color_emphasize_text;
                                    text: item.origin;
                                }
                            }
                            HorizontalLayout {
                                Text {
                                    text: "Autor";
                                }
                                Text {
                                    text: item.author;
                                    color: ColorTheme.color_emphasize_text;
                                }
                            }
                        }

                        /* todo: change gridlayout to ver/hor layout */
                        VerticalLayout {
                            HorizontalLayout {

                            }
                        }
                        /*
                        GridLayout {
                            for tags[x] in item.tags : Rectangle {
                                col: Math.mod(x, 6);
                                row: x / 6;
                                HorizontalLayout {
                                    Rectangle {
                                        background: tags.color;
                                    }
                                    Text {
                                        text: tags.name;
                                    }
                                }
                            }
                        }
                        */
                    }
                }
            }
        }
    }
}

export component ClientDashboard inherits ClientDashboardWindow {
    /* content */
    VerticalLayout {
        /* menu bar */
        ClientDashboardMenu {

        }
        /* link results */
        ClientDashboardLinkResults {

        }
        /* Documents */
        ClientDashboardDocuments {

        }

    }
}